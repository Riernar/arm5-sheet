//include ../k-scaffold/_kpug.pug

mixin roll(name, label, modifier)
    button(type="roll" class="baseRoll" name=`roll_${label}` title=`%{${label}}` value=`[[1d10+(@{${modifier})}]]`)
    button(type="roll" class="baseRoll" name=`roll_${label}` title=`%{${label}}` value=`[[1d10+(@{${modifier})}]]`)

mixin score(name)
    div(class="bigScore")
        input(type="number" name=`attr_${name}_score`)
        span
        input(type="number" name=`attr_${name}_currentXP`)
        span
        input(type="number" name=`attr_${name}_nextXP`)
        span

- var roller_to_rolltemplate = {}

mixin arm5_roll(obj)
    - roller_to_rolltemplate[obj.name] = obj.rolltemplate
    - obj['trigger'] = {listenerFunc:'arm5Roll'}
    +roller(obj)

mixin arm5_rolltemplate_store()
    |const roller_to_rolltemplate = {
    != "\n" + Object.entries(roller_to_rolltemplate).map(([roller, template]) => `  ${roller}: "${template}",`).join("\n") + "\n"
    |};

//-
  Fake nested repeating section

  This mixin makes a repeating section that mimics a nested repeating section. This works by defining
  the levels of the nested repeating section inside a local mixin, and adding some CSS so that a given entry
  of the repeating section hides all levels except the one it actually uses
mixin nestedFieldset({name,trigger,addClass})
    //- Nested mixin to register the levels
    - const levels = [];
    mixin level({name, locked})
        - levels.push({"name": name, "locked": locked || false, "block": block})

    .nestedFieldset
        //- Ignore the block if it is not provided (most likely the case)
        - block ? block() : undefined
        +fieldset({name,trigger,addClass})
            //- hidden input use to make the active level of this repeating row visible
            //- this is set by the sheetworker that adds the rows
            +hidden({name:"--nestedFieldsetLevel"})
            each level, index in levels
                div(class='level' + index, hidden)
                    span !{level.locked}
                    level.block()
        //- TODO: write the JS code to add a level in the repeating section
        //- TODO: add on add button per non-locked level, do not add the level name if only a single level is hear
        +action({name:`add ${name}`,class:'repcontrol-button repcontrol-button--add',trigger:{listenerFunc:'addItem'}})
        +action({name:`edit ${name}`,class:'repcontrol-button repcontrol-button--edit',trigger:{listenerFunc:'editSection'}})
